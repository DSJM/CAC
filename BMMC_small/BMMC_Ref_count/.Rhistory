colnames(conf)
prop.table((conf))
prop.table(conf)
prop.table(conf)*100
prop.table(conf, margin = 1)*100
t(prop.table(conf, margin = 1)*100)
rowSums(conf)
conf
?mgsup
?mgsub
?lapply
?lapply
?lapply
setwd("~/SnakeMake/scRNAseq_Benchmark/Snakemake_CAC/BMMC_small/output/evaluation/Confusion")
ConfPath <- "~/SnakeMake/scRNAseq_Benchmark/Snakemake_CAC/BMMC_small/output/evaluation/Confusion"
conf_files <- list.files(path=ConfPath, pattern="*.csv", full.names=TRUE, recursive=FALSE)
named.list <- lapply(conf_files, read.csv,header=FALSE, sep = "")
View(named.list)
named.list[1]
named.list[[1]]
named.list[1,1]
named.list[1:1
]
named.list[2]
named.list
named.list <- lapply(conf_files, read.csv,header=TRUE, sep = "")
named.list <- lapply(conf_files, read.csv,header=TRUE, sep = "")
named.list <- lapply(conf_files, read.csv,header=TRUE, sep = "")
named.list[1]
named.list <- lapply(conf_files, read.csv,header=TRUE, sep = ",")
named.list[1]
?read.csv
named.list <- lapply(conf_files, read.csv,header=TRUE, sep = ",", row.names = 1)
named.list <- lapply(conf_files, read.csv,header=TRUE, sep = ",", row.names = 1)
named.list[1]
dim(named.list)
length(named.list)
length(named.list[1])
dim(named.list[1])
type(named.list[1])
type(named.list)
array(named.list,dim= c(21,21,2))
array(named.list,dim= c(11,21,2))
array(named.list,dim= c(21,11,2))
conf_list <- lapply(conf_files, read.csv,header=TRUE, sep = ",", row.names = 1)
merge(conf_list[1], conf_list[2])
merge(conf_list[1], conf_list[2], by =0)
abind(conf_list[1], conf_list[2])
library(abind)
abind(conf_list[1], conf_list[2])
conf_list <- sapply(conf_files, read.csv,header=TRUE, sep = ",", row.names = 1)
conf_list <- sapply(conf_files, read.csv,header=TRUE, sep = ",", row.names = 1)
abind(conf_list[1], conf_list[2])
View(conf_list)
cols <- unique(unlist(lapply(conf_list, names)))
rows <- unique(unlist(lapply(conf_list, rownames)))
allNA <-
matrix(NA, length(cols), length(rows)) %>%
`colnames<-`(cols) %>%
`rownames<-`(rows)
unique(unlist(lapply(conf_list, names)))
allNA <-
matrix(NA, length(cols), length(rows)) %>%
`colnames<-`(cols) %>%
`rownames<-`(rows)
matrix(NA, length(cols), length(rows))
x <- matrix(NA, length(cols), length(rows))
rownames(x)<-rows
rwos
rows
allNA <-
matrix(NA, length(rows), length(cols)) %>%
`colnames<-`(cols) %>%
`rownames<-`(rows)
lapply(conf_list, function(df){
allNA[rownames(df), names(df)] <- as.matrix(df)
allNA
}) %>%
list(along = 3) %>%
do.call(what = abind)
lapply(conf_list, function(df){
allNA[rownames(df), names(df)] <- as.matrix(df)
allNA
})
dimnames(conf_list)
View(conf_list)
View(conf_list)
names(conf_list)
?sapply
names(conf_list) <- gsub("*/","",names(conf_list))
names(conf_list)
names(conf_list) <- gsub("$*/","",names(conf_list))
names(conf_list)
names(conf_list) <- gsub(".*/","",names(conf_list))
names(conf_list)
names(conf_list) <- gsub("[ \w-]+\.","",names(conf_list))
names(conf_list) <- gsub("[\w-]+\.","",names(conf_list))
sub(".*/","",names(conf_list))
sub('.*/',"",names(conf_list))
basename(names(conf_list))
conf_list <- sapply(conf_files, read.csv,header=TRUE, sep = ",", row.names = 1)
names(conf_list) <- gsub(".*/","",names(conf_list))
> names(conf_list)
names(conf_list)
names(conf_list) <- gsub(".csv","",names(conf_list))
cols <- unique(unlist(lapply(conf_list, names)))
rows <- unique(unlist(lapply(conf_list, rownames)))
allNA <-
matrix(NA, length(rows), length(cols)) %>%
`colnames<-`(cols) %>%
`rownames<-`(rows)
lapply(conf_list, function(df){
allNA[rownames(df), names(df)] <- as.matrix(df)
allNA})
lapply(conf_list, function(df){
allNA[rownames(df), names(df)] <- as.matrix(df)
allNA
}) %>%
list(along = 3) %>%
do.call(what = abind)
x<-lapply(conf_list, function(df){
allNA[rownames(df), names(df)] <- as.matrix(df)
allNA
}) %>%
list(along = 3) %>%
do.call(what = abind)
x [,,1]
x [,,scVI]
x [,,"scVI"]
x [0,,]
x ["0",,]
conf_list <- lapply(conf_files, read.csv,header=TRUE, sep = ",", row.names = 1)
names(conf_list) <- gsub(".*/","",names(conf_list))
names(conf_list) <- gsub(".csv","",names(conf_list))
cols <- unique(unlist(lapply(conf_list, names)))
rows <- unique(unlist(lapply(conf_list, rownames)))
conf_3D <-
matrix(NA, length(rows), length(cols)) %>%
`colnames<-`(cols) %>%
`rownames<-`(rows)
conf_3D <- lapply(conf_list, function(df){
allNA[rownames(df), names(df)] <- as.matrix(df)
allNA
}) %>%
list(along = 3) %>%
do.call(what = abind)
conf_list <- sapply(conf_files, read.csv,header=TRUE, sep = ",", row.names = 1)
names(conf_list) <- gsub(".*/","",names(conf_list))
names(conf_list) <- gsub(".csv","",names(conf_list))
cols <- unique(unlist(lapply(conf_list, names)))
rows <- unique(unlist(lapply(conf_list, rownames)))
conf_3D <-
matrix(NA, length(rows), length(cols)) %>%
`colnames<-`(cols) %>%
`rownames<-`(rows)
conf_3D <- lapply(conf_list, function(df){
allNA[rownames(df), names(df)] <- as.matrix(df)
allNA
}) %>%
list(along = 3) %>%
do.call(what = abind)
?saveRDS
prop.table(x ["0",,], margin = 1)
prop.table(x ["0",,], margin = 1, exclude = 0)
prop.table(x ["0",,], margin = 1, exclude = "0")
prop.table(table(x ["0",,],  exclude = "0"),margin = 1)
table(x ["0",,]
)
x ["0",,]
type(x["0",,])
as.table(x["0",,])
prop.table(as.table(x["0",,]))
?as.table
as.table(x["0",,], useNA =  "always")
sum(as.table(x["0",,], useNA =  "always"))
summarize(as.table(x["0",,], useNA =  "always"))
summarise(as.table(x["0",,], useNA =  "always"))
?prop.table
as.data.frame(x["0",,], useNA =  "always")
prop.table(as.data.frame(x["0",,]))
as.matrix(x["0",,], useNA =  "always")
?as.matrix
x["0",,][is.na(x["0",,]] <- 0
x[is.na(x)] <- 0
prop.table(x["0",,])
prop.table(x["0",,], 1)
prop.table(x["0",,], 2)
prop.table(x["0",,], 2)*100
file.path(OutputDir,"ClusterSummary.rds" )
ConfPath
results <- clusterSum(ConfPath)
clusterSum <- function(ConfPath){
"
Script to summarize all confusion matrices in one big for manual evaluation.
"
library(abind)
library(dplyr)
conf_files <- list.files(path=ConfPath, pattern="*.csv", full.names=TRUE, recursive=FALSE)
conf_list <- sapply(conf_files, read.csv,header=TRUE, sep = ",", row.names = 1)
names(conf_list) <- gsub(".*/","",names(conf_list))
names(conf_list) <- gsub(".csv","",names(conf_list))
cols <- unique(unlist(lapply(conf_list, names)))
rows <- unique(unlist(lapply(conf_list, rownames)))
conf_3D <-
matrix(NA, length(rows), length(cols)) %>%
`colnames<-`(cols) %>%
`rownames<-`(rows)
conf_3D <- lapply(conf_list, function(df){
conf_3D[rownames(df), names(df)] <- as.matrix(df)
conf_3D
}) %>%
list(along = 3) %>%
do.call(what = abind)
return(conf_3D)
}
results <- clusterSum(ConfPath)
saveRDS(results, file = file.path(OutputDir,"ClusterSummary.rds" ))
ClusterSummary <- readRDS("~/SnakeMake/scRNAseq_Benchmark/Snakemake_CAC/BMMC_small/output/evaluation/ClusterSummary.rds")
ClusterSummary["0",,]
Pat1_CITE_integrated <- readRDS("~/HeterogenetyAML/ProjectData_CITE/Pat1_CITE_integrated.rds")
gc()
rm(list =ls())
knitr::opts_chunk$set(comment=NA, fig.width=15, fig.height=6)
AML_S01_CITE <- readRDS("~/HeterogenetyAML/ProjectData_CITE/Pat1_CITE_integrated.rds")
setwd("~/SnakeMake/scRNAseq_Benchmark/Snakemake_CAC/BMMC_small")
source("/home/david.mentrup/SnakeMake/scRNAseq_Benchmark/Seurat_to_csv.R")
library(dplyr)
library(Seurat)
library(ggplot2)
library(patchwork)
packageVersion("dplyr")
packageVersion("Seurat")
View(AML_S01_CITE)
DimPlot(AML_S01_CITE)
Seurat_to_csv(AML_S01_CITE, AML_S01_CITE@active.ident, "AML_Cluster.csv", "AML_count.csv")
?ReadMM
library(Matrix)
readMM
?readMM
View(Seurat_to_csv)
t(SeuratObject@assays$RNA@counts)
t(AML_S01_CITE@assays$RNA@counts)
getwd()
setwd("~/SnakeMake/scRNAseq_Benchmark/Snakemake_CAC")
writeMM(t(AML_S01_CITE@assays$RNA@counts), "Test.mtx")
readMM("Test.mtx")
x <-readMM("Test.mtx")
rownames(x)
dim(x)
write(x = rownames(AML_S01_CITE@assays$RNA@counts), file = "genes.tsv")
library(rhdf5)
h5write(AML_S01_CITE@assays$RNA@counts, "myhdf5file.h5","test")
type(AML_S01_CITE@assays$RNA@counts)
AML_S01_CITE@assays$RNA@counts
y <- AML_S01_CITE@assays$RNA@counts
h5write(y, "myhdf5file.h5","test")
View(Seurat_to_csv)
source('~/SnakeMake/scRNAseq_Benchmark/Seurat_to_MM.R')
setwd("~/SnakeMake/scRNAseq_Benchmark/Snakemake_CAC/BMMC_AML")
Seurat_to_MM(AML_S01_CITE, "BMMC_Ref")
View(Seurat_to_MM)
obj = AML_S01_CITE@assays$RNA@counts
OutputDir = "BMMC_Ref"
writeMM(obj = obj, file=paste0(OutputDir,"matrix.mtx"))
writeMM(obj = obj, file="matrix.mtx")
getwd
getwd()
source('~/SnakeMake/scRNAseq_Benchmark/Seurat_to_MM.R')
setwd("~/SnakeMake/scRNAseq_Benchmark/Snakemake_CAC/BMMC_AML")
Seurat_to_MM(AML_S01_CITE, "BMMC_Ref")
getwd()
setwd("~/SnakeMake/scRNAseq_Benchmark/Snakemake_CAC/BMMC_AML")
getwd()
setwd("~/SnakeMake/scRNAseq_Benchmark/Snakemake_CAC/BMMC_AML/")
getwd()
setwd("~/SnakeMake/scRNAseq_Benchmark/Snakemake_CAC/BMMC_Ref")
setwd("~/SnakeMake/scRNAseq_Benchmark/Snakemake_CAC/BMMC_AML")
Seurat_to_MM(AML_S01_CITE, "BMMC_Ref")
View(Seurat_to_csv)
knitr::opts_chunk$set(comment=NA, fig.width=15, fig.height=6)
Seurat_to_csv(bmmc_all, bmmc4000$celltype, "BMMC_Ref_Label.csv", "xx")
setwd("~/SnakeMake/scRNAseq_Benchmark/Snakemake_CAC/BMMC_AML")
source('~/SnakeMake/scRNAseq_Benchmark/Seurat_to_MM.R')
source("/home/david.mentrup/SnakeMake/scRNAseq_Benchmark/Seurat_to_csv.R")
library(dplyr)
library(Seurat)
library(ggplot2)
library(patchwork)
packageVersion("dplyr")
packageVersion("Seurat")
bmmc_all <- readRDS("~/HeterogenetyAML/StoredRObj/bmmc_Annot_Ref.rds")
TestDataDir<-"AML_count.csv"
TrainDataDir <- "bmmc.csv"
TrainData <- Read10x_New(TrainDataDir)
Read10x_New <- function(matrix_dir){
barcode.path <- paste0(matrix_dir, "barcodes.tsv")
features.path <- paste0(matrix_dir, "features.tsv")
matrix.path <- paste0(matrix_dir, "matrix.mtx")
mat <- readMM(file = matrix.path)
feature.names = read.delim(features.path,
header = FALSE,
stringsAsFactors = FALSE)
barcode.names = read.delim(barcode.path,
header = FALSE,
stringsAsFactors = FALSE)
colnames(mat) = barcode.names$V1
rownames(mat) = feature.names$V1
}
TrainData <- Read10x_New(TrainDataDir)
getwd()
source('~/SnakeMake/scRNAseq_Benchmark/Seurat_to_csv.R')
setwd("~/SnakeMake/scRNAseq_Benchmark/Snakemake_CAC/BMMC_AML")
source('~/SnakeMake/scRNAseq_Benchmark/Seurat_to_MM.R')
source("/home/david.mentrup/SnakeMake/scRNAseq_Benchmark/Seurat_to_csv.R")
library(dplyr)
library(Seurat)
library(ggplot2)
library(patchwork)
packageVersion("dplyr")
packageVersion("Seurat")
Seurat_to_csv(AML_S01_CITE, AML_S01_CITE@active.ident, "AML_Cluster.csv")
Seurat_to_MM(AML_S01_CITE, "AML_S01_CITE")
getwd()
Seurat_to_csv(bmmc_all, bmmc4000$celltype, "BMMC_Ref_Label.csv")
Seurat_to_csv(bmmc_all, bmmc_all$celltype, "BMMC_Ref_Label.csv")
Seurat_to_MM(bmmc_all, "bmmc_Ref")
TrainData <- Read10x_New(TrainDataDir)
TrainDataDir <- "bmmc_Ref"
TestDataDir<-"AML_S01_CITE"
TrainData <- Read10x_New(TrainDataDir)
matrix_dir <- TrainDataDir
getwd()
barcode.path <- paste0(matrix_dir, "barcodes.tsv")
Read10x_New <- function(matrix_dir){
barcode.path <- paste0(matrix_dir, "/barcodes.tsv")
features.path <- paste0(matrix_dir, "/features.tsv")
matrix.path <- paste0(matrix_dir, "/matrix.mtx")
mat <- readMM(file = matrix.path)
feature.names = read.delim(features.path,
header = FALSE,
stringsAsFactors = FALSE)
barcode.names = read.delim(barcode.path,
header = FALSE,
stringsAsFactors = FALSE)
colnames(mat) = barcode.names$V1
rownames(mat) = feature.names$V1
}
TrainData <- Read10x_New(TrainDataDir)
barcode.path <- paste0(matrix_dir, "/barcodes.tsv")
features.path <- paste0(matrix_dir, "/features.tsv")
matrix.path <- paste0(matrix_dir, "/matrix.mtx")
mat <- readMM(file = matrix.path)
dim(obj)
dim(mat)
matrix_dir <- TestDataDir
barcode.path <- paste0(matrix_dir, "/barcodes.tsv")
features.path <- paste0(matrix_dir, "/features.tsv")
matrix.path <- paste0(matrix_dir, "/matrix.mtx")
mat <- readMM(file = matrix.path)
dim(mat)
feature.names = read.delim(features.path,
header = FALSE,
stringsAsFactors = FALSE)
features.path <- paste0(matrix_dir, "/genes.tsv")
feature.names = read.delim(features.path,
header = FALSE,
stringsAsFactors = FALSE)
barcode.names = read.delim(barcode.path,
header = FALSE,
stringsAsFactors = FALSE)
colnames(mat) = barcode.names$V1
rownames(mat) = feature.names$V1
mat
TrainData <- Read10x_New(TrainDataDir)
TestData <- Read10x_New(TestDataDir)
Read10x_New <- function(matrix_dir){
barcode.path <- paste0(matrix_dir, "/barcodes.tsv")
features.path <- paste0(matrix_dir, "/genes.tsv")
matrix.path <- paste0(matrix_dir, "/matrix.mtx")
mat <- readMM(file = matrix.path)
feature.names = read.delim(features.path,
header = FALSE,
stringsAsFactors = FALSE)
barcode.names = read.delim(barcode.path,
header = FALSE,
stringsAsFactors = FALSE)
colnames(mat) = barcode.names$V1
rownames(mat) = feature.names$V1
}
TestData <- Read10x_New(TestDataDir)
Read10x_New <- function(matrix_dir){
barcode.path <- paste0(matrix_dir, "/barcodes.tsv")
features.path <- paste0(matrix_dir, "/genes.tsv")
matrix.path <- paste0(matrix_dir, "/matrix.mtx")
mat <- readMM(file = matrix.path)
feature.names = read.delim(features.path,
header = FALSE,
stringsAsFactors = FALSE)
barcode.names = read.delim(barcode.path,
header = FALSE,
stringsAsFactors = FALSE)
colnames(mat) = barcode.names$V1
rownames(mat) = feature.names$V1
return(mat)
}
TestData <- Read10x_New(TestDataDir)
TrainData <- Read10x_New(TrainDataDir)
TrainData[intersect(colnames(TrainData), colnames(TestData))]
TrainData[intersect(rownames(TrainData), rownames(TestData))]
rownames(TrainData)
intersect(rownames(TrainData), rownames(TestData))
TrainData[intersect(rownames(TrainData), rownames(TestData))]
TrainData["MAN1A2"]
obj["MAN1A2"]
x<- AML_S01_CITE@assays$RNA@counts
x["MAN1A2"]
x[1,]
x[2,]
x[,1]
x[["MAN1A2"]]
x[[MAN1A2]]
x["MAN1A2",]
TrainData <- TrainData[intersect(rownames(TrainData), rownames(TestData)),]
TestData <- TestData[intersect(colnames(TrainData), colnames(TestData)),]
TestData <- Read10x_New(TestDataDir)
TestData <- TestData[intersect(rownames(TrainData), rownames(TestData)),]
Data <- rbind(TrainData, TestData)
Data <- cbind(TrainData, TestData)
rownames(Data)
Store10x_New(Data, '/data_combined/')
Store10x_New <- function(Matrix,OutputDir){
dir.create(OutputDir)
writeMM(obj = Matrix, file=paste0(OutputDir,"/matrix.mtx"))
write(x = rownames(Matrix),file=paste0(OutputDir,"/genes.tsv"))
write(x = colnames(Matrix), file=paste0(OutputDir,"/barcodes.tsv"))
}
Read10x_New <- function(matrix_dir){
barcode.path <- paste0(matrix_dir, "/barcodes.tsv")
features.path <- paste0(matrix_dir, "/genes.tsv")
matrix.path <- paste0(matrix_dir, "/matrix.mtx")
mat <- readMM(file = matrix.path)
feature.names = read.delim(features.path,
header = FALSE,
stringsAsFactors = FALSE)
barcode.names = read.delim(barcode.path,
header = FALSE,
stringsAsFactors = FALSE)
colnames(mat) = barcode.names$V1
rownames(mat) = feature.names$V1
return(mat)
}
Store10x_New(Data, '/data_combined/')
Store10x_New(Data, '/data_combined')
Store10x_New(Data, 'data_combined')
h5createFile("Test")
print(Hey)
print("Hey")
ClusterSummary <- readRDS("~/SnakeMake/scRNAseq_Benchmark/Snakemake_CAC/BMMC_small/output/evaluation/ClusterSummary.rds")
ClusterSummary["0",,]
gsub("/[^/]*$","","~/SnakeMake/scRNAseq_Benchmark/Snakemake_CAC/BMMC_AML")
setwd("~/SnakeMake/scRNAseq_Benchmark/Snakemake_CAC/BMMC_small")
ConfPath <- "output/evaluation/Confusion/"
conf_files <- list.files(path=ConfPath, pattern="*.csv", full.names=TRUE, recursive=FALSE)
conf_list <- sapply(conf_files, read.csv,header=TRUE, sep = ",", row.names = 1)
names(conf_list) <- gsub(".csv","",names(conf_list))
cols <- unique(unlist(lapply(conf_list, names)))
rows <- unique(unlist(lapply(conf_list, rownames)))
conf_3D <-
matrix(NA, length(rows), length(cols)) %>%
`colnames<-`(cols) %>%
`rownames<-`(rows)
conf_3D <- lapply(conf_list, function(df){
conf_3D[rownames(df), names(df)] <- as.matrix(df)
conf_3D
}) %>%
list(along = 3) %>%
do.call(what = abind)
ClusterSummary <- readRDS("~/SnakeMake/scRNAseq_Benchmark/Snakemake_CAC/BMMC_small/output/evaluation/ClusterSummary.rds")
ClusterSummary["0",,]
gc()
rm(list = ls())
source('~/SnakeMake/scRNAseq_Benchmark/Seurat_to_MM.R')
source('~/CAC_01/Snakemake_CAC/Seurat_to_MM.R')
knitr::opts_chunk$set(comment=NA, fig.width=15, fig.height=6)
setwd("~/CAC_01/Snakemake_CAC//BMMC_small")
source('~/CAC_01/Snakemake_CAC/Seurat_to_MM.R')
library(dplyr)
library(Seurat)
library(ggplot2)
library(patchwork)
packageVersion("dplyr")
packageVersion("Seurat")
bmmc_all <- readRDS("~/HeterogenetyAML/StoredRObj/bmmc_Annot_Ref.rds")
cells.subset.1 <- base::sample(x = Cells(bmmc_all), size = 4000, replace = F)
# Get a vector of cell names for the remaining cells (subset 2)
cells.subset.2 <- sample(x = subset(x = Cells(bmmc_all), subset = !(Cells(bmmc_all) %in% cells.subset.1)), size = 1000, replace = F)
# Create 2 subsetted objects, each formed by the corresponding cells
# Set 'do.clean = T' if you want to keep only the 'data' and 'raw.data' slots
bmmc4000 <- subset(bmmc_all, cells = cells.subset.1)
bmmc1000 <- subset(bmmc_all, cells = cells.subset.2)
Seurat_to_MM(bmmc4000, bmmc4000$celltype, "BMMC_Ref_Label.csv", "BMMC_Ref_count")
Seurat_to_MM(bmmc1000, bmmc1000$seurat_clusters, "BMMC_Test_Label.csv", "BMMC_Test_count")
source("SparseMatrix.R")
setwd("~/CAC_01/Snakemake_CAC")
source("SparseMatrix.R")
setwd("~/CAC_01/Snakemake_CAC/Scripts")
source("../SparseMatrix.R")
reticulate::repl_python()
setwd("~/CAC_01/Snakemake_CAC/BMMC_small/BMMC_Ref_count")
reticulate::repl_python()
reticulate::source_python('~/CAC_01/Snakemake_CAC/SparseMatrix.py')
reticulate::repl_python()
