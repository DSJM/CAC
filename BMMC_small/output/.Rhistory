bmmc.anchors <- FindTransferAnchors(reference = bmmc_Ref, query = Pat1,
dims = 1:30)
predictions <- TransferData(anchorset = bmmc.anchors, refdata = bmmc_Ref@active.ident,
dims = 1:30)
Pat1 <- AddMetaData(Pat1, metadata = predictions)
DimPlot(Pat1, reduction = "umap", group.by="predicted.id", label = TRUE, label.size=8) + NoLegend()
saveRDS(Pat1, file = "./Pat1_noCITE_p.rds")
S01_CITE.combined <-  readRDS(file = "./Pat1_CITE_integrated.rds")
DefaultAssay(S01_CITE.combined)<- "RNA"
S01_noCITE <-  readRDS(file = "./Pat1_noCITE_p.rds")
DefaultAssay(S01_noCITE)<- "RNA"
DimPlot(S01_CITE.combined, reduction = "umap", group.by="RNA_cluster", label = TRUE, label.size=10, pt.size = 0.5) + NoLegend()
S01_CITE.combined <- BuildClusterTree(S01_CITE.combined, dims = 1:25)
plotClusterTree(S01_CITE.combined)
Tool(object = S01_CITE.combined, slot = 'BuildClusterTree')
Tool(object = S01_CITE.combined, slot = 'BuildClusterTree')
PlotClusterTree(S01_CITE.combined)
S01_CITE.combined@active.ident
S01_CITE.combined@meta.data$RNA_snn_res.0.6
S01_CITE.combined<-SetIdent(S01_CITE.combined, ident = "S01_CITE.combined@meta.data$RNA_snn_res.0.6")
S01_CITE.combined<-SetIdent(S01_CITE.combined, value = "S01_CITE.combined@meta.data$RNA_snn_res.0.6")
S01_CITE.combined <- BuildClusterTree(S01_CITE.combined, dims = 1:25)
S01_CITE.combined<-SetIdent(S01_CITE.combined, value = S01_CITE.combined@meta.data$RNA_snn_res.0.6)
S01_CITE.combined <- BuildClusterTree(S01_CITE.combined, dims = 1:25)
PlotClusterTree(S01_CITE.combined)
knitr::opts_chunk$set(comment=NA, fig.width=20, fig.height=10, cache=FALSE)
S01_CITE.DGE <- FindMarkers(S01_CITE.combined, ident.1 = "CITE_01", ident.2 = "noCITE_02")
length(S01_CITE.combined$RNA_snn_res.0.6)
dim(S01_CITE.combined$RNA_snn_res.0.6)
View(S01_CITE.combined)
levels(S01_CITE.combined)
levels(S01_CITE.combined$RNA_cluster)
knitr::opts_chunk$set(comment=NA, fig.width=20, fig.height=20, cache=FALSE)
library(dplyr)
library(Seurat)
library(ggplot2)
library(scales)
library(mixtools)
packageVersion("dplyr")
packageVersion("Seurat")
knitr::opts_chunk$set(comment=NA, fig.width=20, fig.height=20, cache=FALSE)
library(dplyr)
library(Seurat)
library(ggplot2)
library(scales)
library(mixtools)
packageVersion("dplyr")
packageVersion("Seurat")
Pat1_HL60 <- readRDS(file ="./Pat1_HL60_CITE.rds")
DefaultAssay(Pat1_HL60 )<- "RNA"
VlnPlot(Pat1_HL60, assay= "HTO",features = c("Pat1-R1-H1","Pat1-Ven-R1-H2", "HL60-R1-H3"), ncol = 2, pt.size = 0.1, group.by = "RNA_cluster") + NoLegend()
DimPlot(Pat1_HL60, label = TRUE, label.size = 10, reduction  = "umap", group.by = "RNA_cluster") + NoLegend()
Pat1_CITE.c <- subset(Pat1_HL60, subset = `hto_HL60-R1-H3` < 1.5)
Pat1_CITE.c <- subset(Pat1_CITE.c, subset = RNA_cluster != 4 & RNA_cluster != 6 & RNA_cluster != 9)
VlnPlot(Pat1_CITE.c, assay= "HTO",features = c("HL60-R1-H3"), ncol = 1, pt.size = 0.1, group.by = "RNA_cluster") + NoLegend()
Pat1_CITE.c
FeatureScatter(Pat1_CITE.c, feature1 = "hto_Pat1-R1-H1", feature2 = "hto_Pat1-Ven-R1-H2") + stat_function(fun=function(x)(1/4* exp (2*x)) -0.2 )  + stat_function(fun=function(x)(1/2*log (4*x) ) ) + ylim(0,4) + xlim(0,4)
Pat1_CITE.c[["H1.H2"]]<- Pat1_CITE.c@assays$HTO@data["Pat1-R1-H1",]-Pat1_CITE.c@assays$HTO@data["Pat1-Ven-R1-H2",]
VlnPlot(Pat1_CITE.c, features = c("H1.H2"), group.by = "orig.ident")+ geom_hline(yintercept=0.2)
mixmdl <- Mclust(t(Pat1_CITE.c@assays$HTO@data[c("Pat1-R1-H1","Pat1-Ven-R1-H2"),]), G = 2)
summary(mixmdl, parameters = TRUE)
plot(mixmdl, what= "classification")
mixmd2 <- normalmixEM(Pat1_CITE.c[["H1.H2"]][,1], k = 2)
data.frame(x = mixmd2$x)%>%
ggplot() +
geom_histogram(aes(x, ..density..), binwidth = 0.01, colour = "black",
fill = "white") +  ylab("Density") +geom_vline (xintercept = 0.15)
post.df <- as.data.frame(cbind(x = mixmd2$x, mixmd2$posterior))
head(post.df, 100)
DefaultAssay(object = Pat1_CITE.c) <- "HTO"
Pat1_CITE.c@meta.data$Sample <- 'Unknown'
Pat1_CITE.c@meta.data[WhichCells(Pat1_CITE.c, expression = H1.H2 > 0.2) ,"Sample"] <- "Pat1_R1_H1-N"
Pat1_CITE.c@meta.data[WhichCells(Pat1_CITE.c, expression = H1.H2 < 0) ,"Sample"] <- "Pat1_R1_Ven_H2-N"
Pat1_CITE.c@meta.data[WhichCells(Pat1_CITE.c, expression = `Pat1-Ven-R1-H2` >1 & `Pat1-R1-H1` >1) ,"Sample"] <- "Multi-Cell-Hashs"
Pat1_CITE.c@meta.data[WhichCells(Pat1_CITE.c, expression = `Pat1-Ven-R1-H2` <0.2 & `Pat1-R1-H1` <0.2) ,"Sample"] <- "Unlabelled"
DefaultAssay(Pat1_CITE.c) <- "RNA"
FeatureScatter(Pat1_CITE.c, feature1 = "hto_Pat1-R1-H1", feature2 = "hto_Pat1-Ven-R1-H2", group.by = "Sample")
DimPlot(Pat1_CITE.c, reduction = "tsne", group.by="Sample", label = TRUE, label.size=10) + NoLegend()
prop.table(table(Pat1_CITE.c@meta.data$Sample, Pat1_CITE.c@meta.data$seurat_clusters), margin = 1)*100
prop.table(table( Pat1_CITE.c@meta.data$seurat_clusters, Pat1_CITE.c@meta.data$Sample), margin = 1)*100
table(Pat1_CITE.c@meta.data$Sample)
DefaultAssay(Pat1_CITE.c) <- "RNA"
Pat1_CITE.c<- NormalizeData(Pat1_CITE.c)
Pat1_CITE.c<- FindVariableFeatures(Pat1_CITE.c)
Pat1_CITE.c<- ScaleData(Pat1_CITE.c)
Pat1_CITE.c<- RunPCA(Pat1_CITE.c)
ElbowPlot(Pat1_CITE.c, ndims = 50)
FeatureScatter(Pat1_CITE.c, feature1 = "hto_Pat1-R1-H1", feature2 = "hto_Pat1-Ven-R1-H2") + stat_function(fun=function(x)(1/4* exp (2*x)) -0.2 )  + stat_function(fun=function(x)(1/2*log (4*x) ) ) + ylim(0,4) + xlim(0,4)
Pat1_CITE.only <- subset(Pat1_CITE.c, subset = Sample == "Pat1_R1_H1-N" | Sample == "Pat1_R1_Ven_H2-N")
table(Pat1_CITE.only@meta.data$Sample)
DefaultAssay(Pat1_CITE.only) <- "RNA"
Pat1_CITE.only<- NormalizeData(Pat1_CITE.only)
Pat1_CITE.only<- FindVariableFeatures(Pat1_CITE.only)
Pat1_CITE.only<- ScaleData(Pat1_CITE.only)
Pat1_CITE.only<- RunPCA(Pat1_CITE.only)
ElbowPlot(Pat1_CITE.only, ndims = 50)
Pat1_CITE.only <- RunUMAP(Pat1_CITE.only, dims = 1:25)
Pat1_CITE.only <- RunTSNE(Pat1_CITE.only, dims = 1:25)
Pat1_CITE.only <- FindNeighbors(Pat1_CITE.only, dims = 1:25)
Pat1_CITE.only <- FindClusters(Pat1_CITE.only, resolution = 0.1,algorithm = 3, random.seed = 19950927)
Pat1_CITE.only@meta.data$RNA_cluster_0.1 <- Pat1_CITE.only@active.ident
prop.table(table(Pat1_CITE.only@meta.data$Sample, Pat1_CITE.only@meta.data$RNA_cluster_0.1), margin = 1)*100
DimPlot(Pat1_CITE.only, reduction = "tsne", group.by="RNA_cluster_0.1", label = TRUE, label.size=10, pt.size = 0.5) + NoLegend()
DimPlot(Pat1_CITE.only, reduction = "umap", group.by="RNA_cluster_0.1", label = TRUE, label.size=10, pt.size = 0.5) + NoLegend()
Pat1_CITE.only <- FindClusters(Pat1_CITE.only, resolution = 0.5,algorithm = 3, random.seed = 19950927)
Pat1_CITE.only@meta.data$RNA_cluster <- Pat1_CITE.only@active.ident
prop.table(table(Pat1_CITE.only@meta.data$Sample, Pat1_CITE.only@meta.data$RNA_cluster), margin = 1)*100
DimPlot(Pat1_CITE.only, reduction = "tsne", group.by="RNA_cluster", label = TRUE, label.size=10, pt.size = 0.5) + NoLegend()
DimPlot(Pat1_CITE.only, reduction = "umap", group.by="RNA_cluster", label = TRUE, label.size=10, pt.size = 0.5) + NoLegend()
saveRDS(Pat1_CITE.only, file = "./Pat1_CITE_integrated.rds")
)mcclust
?mclust
S01_CITE.combined <-  readRDS(file = "./Pat1_CITE_integrated.rds")
DefaultAssay(S01_CITE.combined)<- "RNA"
S01_CITE.combined<-SetIdent(S01_CITE.combined, value = S01_CITE.combined@meta.data$RNA_snn_res.0.6)
S01_noCITE <-  readRDS(file = "./Pat1_noCITE_p.rds")
DefaultAssay(S01_noCITE)<- "RNA"
DimPlot(S01_CITE.combined, reduction = "umap", group.by="RNA_cluster", label = TRUE, label.size=10, pt.size = 0.5) + NoLegend()
S01_CITE.combined <- BuildClusterTree(S01_CITE.combined, dims = 1:25)
PlotClusterTree(S01_CITE.combined)
S01_CITE.combined<-SetIdent(S01_CITE.combined, value = S01_CITE.combined@meta.data$RNA_cluster)
DimPlot(S01_CITE.combined, reduction = "umap", group.by="RNA_cluster", label = TRUE, label.size=10, pt.size = 0.5) + NoLegend()
S01_CITE.combined <- BuildClusterTree(S01_CITE.combined, dims = 1:25)
PlotClusterTree(S01_CITE.combined)
S01_CITE.combined <- BuildClusterTree(S01_CITE.combined, dims = 1:25)
PlotClusterTree(S01_CITE.combined)
levels(S01_CITE.combined)
length(levels(S01_CITE.combined))
length(levels(S01_CITE.combined@meta.data$celltype))
output <- "DGE_Ven_Cluster"
S01_CITE.combined$celltype <- Idents(S01_CITE.combined)
Idents(S01_CITE.combined) <- "Sample"
for (i in 0:length(levels(S01_CITE.combined@meta.data$celltype))){ #or however many clusters you have
try({
ident1 <- paste0(i,"_condition1")
ident2 <- paste0(i,"condition2")
condition.diffgenes <- FindMarkers(mySeurat, ident.1 = ident1, ident.2=ident2, min.pct=0.25, logfc.threshold=0.25)
write.csv(condition.diffgenes, file=paste0(output,i,".csv"))
})
}
output <- "DGE_Ven_Cluster/"
for (i in 0:length(levels(S01_CITE.combined@meta.data$celltype))){ #or however many clusters you have
try({
ident1 <- paste0(i,"_condition1")
ident2 <- paste0(i,"condition2")
condition.diffgenes <- FindMarkers(S01_CITE.combined, ident.1 = ident1, ident.2=ident2, min.pct=0.25, logfc.threshold=0.25)
write.csv(condition.diffgenes, file=paste0(output,i,".csv"))
})
}
levels(S01_CITE.combined)
for (i in 0:length(levels(S01_CITE.combined@meta.data$celltype))){ #or however many clusters you have
try({
ident1 <- paste0(i,"Pat1_R1_Ven_H2-N")
ident2 <- paste0(i,"Pat1_R1_H1-N")
condition.diffgenes <- FindMarkers(S01_CITE.combined, ident.1 = ident1, ident.2=ident2, min.pct=0.25, logfc.threshold=0.25)
write.csv(condition.diffgenes, file=paste0(output,i,".csv"))
})
}
S01_CITE.combined$celltype.condition <- paste(Idents(S01_CITE.combined), mySeurat$Sample, sep="_")
S01_CITE.combined$celltype.condition <- paste(Idents(S01_CITE.combined), S01_CITE.combined$Sample, sep="_")
Idents(S01_CITE.combined) <- "celltype.condition"
for (i in 0:length(levels(S01_CITE.combined@meta.data$celltype))){ #or however many clusters you have
try({
ident1 <- paste0(i,"_Pat1_R1_Ven_H2-N")
ident2 <- paste0(i,"_Pat1_R1_H1-N")
condition.diffgenes <- FindMarkers(S01_CITE.combined, ident.1 = ident1, ident.2=ident2, min.pct=0.25, logfc.threshold=0.25)
write.csv(condition.diffgenes, file=paste0(output,i,".csv"))
})
}
S01_CITE.combined$Sample
S01_CITE.combined$celltype.condition
S01_CITE.combined<-SetIdent(S01_CITE.combined, value = S01_CITE.combined@meta.data$RNA_cluster)
S01_CITE.combined$celltype <- Idents(S01_CITE.combined)
S01_CITE.combined$celltype.condition <- paste(S01_CITE.combined$celltype, S01_CITE.combined$Sample, sep="_")
S01_CITE.combined$celltype.condition
for (i in 0:length(levels(S01_CITE.combined@meta.data$celltype))){ #or however many clusters you have
try({
ident1 <- paste0(i,"_Pat1_R1_Ven_H2-N")
ident2 <- paste0(i,"_Pat1_R1_H1-N")
condition.diffgenes <- FindMarkers(S01_CITE.combined, ident.1 = ident1, ident.2=ident2, min.pct=0.25, logfc.threshold=0.25)
write.csv(condition.diffgenes, file=paste0(output,i,".csv"))
})
}
Idents(S01_CITE.combined) <- "celltype.condition"
for (i in 0:length(levels(S01_CITE.combined@meta.data$celltype))){ #or however many clusters you have
try({
ident1 <- paste0(i,"_Pat1_R1_Ven_H2-N")
ident2 <- paste0(i,"_Pat1_R1_H1-N")
condition.diffgenes <- FindMarkers(S01_CITE.combined, ident.1 = ident1, ident.2=ident2, min.pct=0.25, logfc.threshold=0.25)
write.csv(condition.diffgenes, file=paste0(output,i,".csv"))
})
}
output <- "./ProjectData_CITE/DGE_Ven_Cluster/"
for (i in 0:length(levels(S01_CITE.combined@meta.data$celltype))){ #or however many clusters you have
try({
ident1 <- paste0(i,"_Pat1_R1_Ven_H2-N")
ident2 <- paste0(i,"_Pat1_R1_H1-N")
condition.diffgenes <- FindMarkers(S01_CITE.combined, ident.1 = ident1, ident.2=ident2, min.pct=0.25, logfc.threshold=0.25)
write.csv(condition.diffgenes, file=paste0(output,i,".csv"))
})
}
getwd()
setwd("~/HeterogenetyAML/ProjectData_CITE/DGE_Ven_Cluster")
output <- "~/HeterogenetyAML/ProjectData_CITE/DGE_Ven_Cluster"
for (i in 0:length(levels(S01_CITE.combined@meta.data$celltype))){ #or however many clusters you have
try({
ident1 <- paste0(i,"_Pat1_R1_Ven_H2-N")
ident2 <- paste0(i,"_Pat1_R1_H1-N")
condition.diffgenes <- FindMarkers(S01_CITE.combined, ident.1 = ident1, ident.2=ident2, min.pct=0.25, logfc.threshold=0.25)
write.csv(condition.diffgenes, file=paste0(output,i,".csv"))
})
}
for (i in (levels(S01_CITE.combined@meta.data$celltype)){ #or however many clusters you have
for (i in levels(S01_CITE.combined@meta.data$celltype)){ #or however many clusters you have
try({
ident1 <- paste0(i,"_Pat1_R1_Ven_H2-N")
ident2 <- paste0(i,"_Pat1_R1_H1-N")
condition.diffgenes <- FindMarkers(S01_CITE.combined, ident.1 = ident1, ident.2=ident2, min.pct=0.25, logfc.threshold=0.25)
write.csv(condition.diffgenes, file=paste0(output,i,".csv"))
})
}
output <- "~/HeterogenetyAML/ProjectData_CITE/DGE_Ven_Cluster/"
output <- "~/HeterogenetyAML/ProjectData_CITE/DGE_Ven_Cluster/"
S01_CITE.combined$celltype <- Idents(S01_CITE.combined)
S01_CITE.combined$celltype.condition <- paste(S01_CITE.combined$celltype, S01_CITE.combined$Sample, sep="_")
Idents(S01_CITE.combined) <- "celltype.condition"
for (i in levels(S01_CITE.combined@meta.data$celltype)){ #or however many clusters you have
try({
ident1 <- paste0(i,"_Pat1_R1_Ven_H2-N")
ident2 <- paste0(i,"_Pat1_R1_H1-N")
condition.diffgenes <- FindMarkers(S01_CITE.combined, ident.1 = ident1, ident.2=ident2, min.pct=0.25, logfc.threshold=0.25)
write.csv(condition.diffgenes, file=paste0(output,i,".csv"))
})
}
S01_CITE.combined<-SetIdent(S01_CITE.combined, value = S01_CITE.combined@meta.data$RNA_cluster)
output <- "~/HeterogenetyAML/ProjectData_CITE/DGE_Ven_Cluster/"
S01_CITE.combined$celltype <- Idents(S01_CITE.combined)
S01_CITE.combined$celltype.condition <- paste(S01_CITE.combined$celltype, S01_CITE.combined$Sample, sep="_")
Idents(S01_CITE.combined) <- "celltype.condition"
for (i in levels(S01_CITE.combined@meta.data$celltype)){ #or however many clusters you have
try({
ident1 <- paste0(i,"_Pat1_R1_Ven_H2-N")
ident2 <- paste0(i,"_Pat1_R1_H1-N")
condition.diffgenes <- FindMarkers(S01_CITE.combined, ident.1 = ident1, ident.2=ident2, min.pct=0.25, logfc.threshold=0.25)
write.csv(condition.diffgenes, file=paste0(output,i,".csv"))
})
}
S01_CITE.combined$celltype.condition
Idents(S01_CITE.combined) <- "Sample"
condition.diffgenes <- FindMarkers(S01_CITE.combined, ident.1 = "Pat1_R1_Ven_H2-N", ident.2="Pat1_R1_H1-N", min.pct=0.25, logfc.threshold=0.25)
write.csv(condition.diffgenes, file=paste0(output,"complete",".csv"))
VlnPlot(Pat1_HL60, assay= "RNA",features = c("ZFAS1"), ncol = 2, pt.size = 0.1, split.by = "Sample") + NoLegend()
Idents(S01_CITE.combined)
VlnPlot(Pat1_HL60, assay= "RNA",features = c("ZFAS1"), ncol = 2, pt.size = 0.1) + NoLegend()
VlnPlot(S01_CITE.combined, assay= "RNA",features = c("ZFAS1"), ncol = 2, pt.size = 0.1) + NoLegend()
VlnPlot(S01_CITE.combined, assay= "RNA",features = c("ZFAS1"), ncol = 2, pt.size = 0.1, group.by = "RNA_cluster", split.by ="Sampl3") + NoLegend()
VlnPlot(S01_CITE.combined, assay= "RNA",features = c("ZFAS1"), ncol = 2, pt.size = 0.1, group.by = "RNA_cluster", split.by ="Sample") + NoLegend()
VlnPlot(object = S01_CITE.combined, features = c("ZFAS1", "Tnf"), split.by = "Sample", group.by = "RNA_cluster", pt.size = 0, combine = FALSE, log=T)
VlnPlot(object = S01_CITE.combined, features = c("ZFAS1", "ZFAS1"), split.by = "Sample", group.by = "RNA_cluster", pt.size = 0, combine = FALSE, log=T)
VlnPlot(S01_CITE.combined, features = "percent.mt", split.by = "groups")
VlnPlot(S01_CITE.combined, features = "percent.mt", split.by = "Sample")
VlnPlot(S01_CITE.combined, features = "percent.mt", split.by = S01_CITE.combined$Sample)
VlnPlot(S01_CITE.combined, features = "percent.mt", split.by = S01_CITE.combined@meta.data$Sample)
S01_CITE.combined<-SetIdent(S01_CITE.combined, value = S01_CITE.combined@meta.data$RNA_cluster)
VlnPlot(S01_CITE.combined, features = "percent.mt",  split.by = "Sample")
?VlnPl
?VlnPlot
VlnPlot(S01_CITE.combined, features = "percent.mt",  split.by = "Sample", split.plot = FALSE)
VlnPlot(S01_CITE.combined, features = "percent.mt",  split.by = "Sample", split.plot = TRUE)
VlnPlot(S01_CITE.combined, assay= "RNA",features = c("ZFAS1"), ncol = 2, pt.size = 0.1, group.by = "RNA_cluster", split.by ="Sample", split.plot = TRUE)
VlnPlot(S01_CITE.combined, assay= "RNA",features = c("ZFAS1"), ncol = 2, pt.size = 0.1, group.by = "RNA_cluster", split.by ="Sample", split.plot = FALSE)
VlnPlot(S01_CITE.combined, assay= "RNA",features = c("ZFAS1"), ncol = 2, pt.size = 0.1, group.by = "RNA_cluster", split.by ="Sample", split.plot = TRUE)
VlnPlot(S01_CITE.combined, assay= "RNA",features = c("ZFAS1", "FCER1G"), ncol = 2, pt.size = 0.1, group.by = "RNA_cluster", split.by ="Sample", split.plot = TRUE)
VlnPlot(S01_CITE.combined, assay= "RNA",features = c( "FCER1G", "NCF1", "ALOX5AP", "S100A10"), ncol = 2, pt.size = 0.1, group.by = "RNA_cluster", split.by ="Sample", split.plot = TRUE)
prop.table(table(Pat1_CITE.only@meta.data$Sample, Pat1_CITE.only@meta.data$RNA_cluster), margin = 1)*100
VlnPlot(S01_CITE.combined, assay= "RNA",features = c( "SOX4"), ncol = 2, pt.size = 0.1, group.by = "RNA_cluster", split.by ="Sample", split.plot = TRUE)
gc()
rm(list=ls())
setwd("~/SnakeMake/scRNAseq_Benchmark/Snakemake_CAC/BMMC_small")
bmmc_Annot_Ref <- readRDS("~/HeterogenetyAML/StoredRObj/bmmc_Annot_Ref.rds")
knitr::opts_chunk$set(comment=NA, fig.width=15, fig.height=6)
bmmc_all <- readRDS("~/HeterogenetyAML/StoredRObj/bmmc_Annot_Ref.rds")
?subset
?sample
bmmc_5000cells <- sample(x = bmmc_all@cell.names, size = 5000, replace = F)
rownames(bmmc_all)
colnames(bmmc_all)
`resample`
?resample`
`
?resample
bmmc_5000cells <- sample(x = colnames(bmmc_all), size = 5000, replace = F)
bmmc_1000cells <- sample(x = colnames(subset(x = bmmc_all, subset = !(colnames(bmmc_all) %in% bmmc_5000cells)), size = 5000, replace = F)
)
bmmc_1000cells <- sample(x = colnames(subset(x = bmmc_all, subset = !(colnames(bmmc_all) %in% bmmc_5000cells))), size = 5000, replace = F)
subset(x = bmmc_all, subset = !(colnames(bmmc_all) %in% bmmc_5000cells))
subset(x = bmmc_all)
subset(x = bmmc_all, subset = !(colnames(bmmc_all) == "ABC"))
bmmc_5000cells
subset(x = bmmc_all, subset = colnames(bmmc_all) == "J.GSM3396170_TGAGCATAGTATCGAA"))
subset(x = bmmc_all, subset = colnames(bmmc_all) == "J.GSM3396170_TGAGCATAGTATCGAA")
?subset
View(bmmc_all)
bmmc_5000cells <- sample(x = colnames(bmmc_all), size = 5000, replace = F)
names(sample(x = bmmc_all@active.ident, size = 5000)
)
names(sample(x = bmmc_all, size = 5000)
)
bmmc_4000 <- subset(bmmc_all, cells = sample(bmmc_5000cells, 4000))
bmmc_all$k.assign <- sample(rownames(bmmc_all), size = 5000, replace = TRUE)
bmmc_all$k.assign <- "0"
bmmc_all$k.assign <- sample(rownames(bmmc_all), size = 5000, replace = TRUE)
b5000 <- sample(Cells(bmmc_all), 5000)
b1000 <- sample(b5000, 1000)
b4000 <- b5000
b4000 <- b5000(!b1000)
b5000[!b1000]
b5000[b1000]
b5000[b1000,]
cells.subset.1 <- base::sample(x = Cells(bmmc_all), size = 4000, replace = F)
# Get a vector of cell names for the remaining cells (subset 2)
cells.subset.2 <- base::subset(x = Cells(bmmc_all), subset = !(Cells(bmmc_all) %in% cells.subset.1))
# Get a vector of cell names for the remaining cells (subset 2)
cells.subset.2 <- sample(x = subset(x = Cells(bmmc_all), subset = !(Cells(bmmc_all) %in% cells.subset.1))), size = 4000, replace = F)
# Get a vector of cell names for the remaining cells (subset 2)
cells.subset.2 <- sample(x = subset(x = Cells(bmmc_all), subset = !(Cells(bmmc_all) %in% cells.subset.1)), size = 4000, replace = F)
# Get a vector of cell names for the remaining cells (subset 2)
cells.subset.2 <- sample(x = subset(x = Cells(bmmc_all), subset = !(Cells(bmmc_all) %in% cells.subset.1)), size = 1000, replace = F)
cells.subset.1 <- base::sample(x = Cells(bmmc_all), size = 4000, replace = F)
# Get a vector of cell names for the remaining cells (subset 2)
cells.subset.2 <- sample(x = subset(x = Cells(bmmc_all), subset = !(Cells(bmmc_all) %in% cells.subset.1)), size = 1000, replace = F)
# Create 2 subsetted objects, each formed by the corresponding cells
# Set 'do.clean = T' if you want to keep only the 'data' and 'raw.data' slots
bmmc4000 <- Seurat::SubsetData(object = object, cells.use = cells.subset.1, do.clean = F)
cells.subset.1 <- base::sample(x = Cells(bmmc_all), size = 4000, replace = F)
# Get a vector of cell names for the remaining cells (subset 2)
cells.subset.2 <- sample(x = subset(x = Cells(bmmc_all), subset = !(Cells(bmmc_all) %in% cells.subset.1)), size = 1000, replace = F)
# Create 2 subsetted objects, each formed by the corresponding cells
# Set 'do.clean = T' if you want to keep only the 'data' and 'raw.data' slots
bmmc4000 <- Seurat::SubsetData(object = bmmc_all, cells.use = cells.subset.1, do.clean = F)
bmmc1000 <- Seurat::SubsetData(object = bmmc_all, cells.use = cells.subset.2, do.clean = F)
cells.subset.1 <- base::sample(x = Cells(bmmc_all), size = 4000, replace = F)
# Get a vector of cell names for the remaining cells (subset 2)
cells.subset.2 <- sample(x = subset(x = Cells(bmmc_all), subset = !(Cells(bmmc_all) %in% cells.subset.1)), size = 1000, replace = F)
# Create 2 subsetted objects, each formed by the corresponding cells
# Set 'do.clean = T' if you want to keep only the 'data' and 'raw.data' slots
bmmc4000 <- subset(object = bmmc_all, cells = cells.subset.1)
bmmc4000 <- subset(object = bmmc_all, cells = c("W.GSM3396185_GCGACCAAGACTTGAA"))
# Create 2 subsetted objects, each formed by the corresponding cells
# Set 'do.clean = T' if you want to keep only the 'data' and 'raw.data' slots
bmmc4000 <- subset(object = bmmc_all, idents = cells.subset.1)
# Create 2 subsetted objects, each formed by the corresponding cells
# Set 'do.clean = T' if you want to keep only the 'data' and 'raw.data' slots
bmmc4000 <- subset(object = bmmc_all, idents = names(cells.subset.1))
# Create 2 subsetted objects, each formed by the corresponding cells
# Set 'do.clean = T' if you want to keep only the 'data' and 'raw.data' slots
bmmc4000 <- subset(object = bmmc_all, cells = names(sample(x = bmmc_all@active.ident, size = n.cells)))
# Create 2 subsetted objects, each formed by the corresponding cells
# Set 'do.clean = T' if you want to keep only the 'data' and 'raw.data' slots
bmmc4000 <- subset(bmmc_all, cells = names(sample(x = bmmc_all@active.ident, size = n.cells)))
# Create 2 subsetted objects, each formed by the corresponding cells
# Set 'do.clean = T' if you want to keep only the 'data' and 'raw.data' slots
bmmc4000 <- subset(bmmc_all, idents = names(cells.subset.1))
# Create 2 subsetted objects, each formed by the corresponding cells
# Set 'do.clean = T' if you want to keep only the 'data' and 'raw.data' slots
bmmc4000 <- subset(bmmc_all, cells = cells.subset.1)
bmmc1000 <- subset(bmmc_all, cells = cells.subset.2)
Seurat_to_csv(bmmc4000, "BMMC_Ref_Label.csv", "BMMC_Ref_count.csv")
setwd("~/SnakeMake/scRNAseq_Benchmark/Snakemake_CAC/BMMC_small")
source("/home/david.mentrup/SnakeMake/scRNAseq_Benchmark/Seurat_to_csv.R")
library(dplyr)
library(Seurat)
library(ggplot2)
library(patchwork)
packageVersion("dplyr")
packageVersion("Seurat")
Seurat_to_csv(bmmc4000, "BMMC_Ref_Label.csv", "BMMC_Ref_count.csv")
Seurat_to_csv(bmmc1000, "BMMC_Test_Label.csv", "BMMC_Test_count.csv")
setwd("~/SnakeMake/scRNAseq_Benchmark/Snakemake_CAC/BMMC_small")
TrainData <- read.csv("BMMC_small/BMMC_Ref_Label.csv", row.names = 1)
setwd("~/SnakeMake/scRNAseq_Benchmark/Snakemake_CAC/BMMC_small")
TrainData <- read.csv("BMMC_small/BMMC_Ref_Label.csv", row.names = 1)
setwd("~/SnakeMake/scRNAseq_Benchmark/Snakemake_CAC")
setwd("~/SnakeMake/scRNAseq_Benchmark/Snakemake_CAC")
TrainData <- read.csv("BMMC_small/BMMC_Ref_Label.csv", row.names = 1)
TrainData <- read.csv("BMMC_small/BMMC_Test_Label.csv", row.names = 1)
View(bmmc1000)
View(Seurat_to_csv)
SeuratObject <- bmmc1000
SeuratObject$seurat_clusters
SeuratObject$celltype
write.csv(x = as.matrix(SeuratObject@celltype), file = "TT", append = FALSE, col.names = c("x"), row.names=FALSE)
SeuratObject@celltype
SeuratObject$celltype
write.csv(x = as.matrix(SeuratObject$celltype), file = "TT", append = FALSE, col.names = c("x"), row.names=FALSE)
setwd("~/SnakeMake/scRNAseq_Benchmark/Snakemake_CAC/BMMC_small")
source("/home/david.mentrup/SnakeMake/scRNAseq_Benchmark/Seurat_to_csv.R")
library(dplyr)
library(Seurat)
library(ggplot2)
library(patchwork)
packageVersion("dplyr")
packageVersion("Seurat")
Seurat_to_csv(bmmc4000, "celltype", "BMMC_Ref_Label.csv", "BMMC_Ref_count.csv")
SeuratObject@meta.data
Seurat_to_csv(bmmc4000, bmmc4000$celltype, "BMMC_Ref_Label.csv", "BMMC_Ref_count.csv")
setwd("~/SnakeMake/scRNAseq_Benchmark/Snakemake_CAC/BMMC_small")
source("/home/david.mentrup/SnakeMake/scRNAseq_Benchmark/Seurat_to_csv.R")
library(dplyr)
library(Seurat)
library(ggplot2)
library(patchwork)
packageVersion("dplyr")
packageVersion("Seurat")
Seurat_to_csv(bmmc4000, bmmc4000$celltype, "BMMC_Ref_Label.csv", "BMMC_Ref_count.csv")
Seurat_to_csv(bmmc1000, bmmc4000$seurat_cluster, "BMMC_Test_Label.csv", "BMMC_Test_count.csv")
Seurat_to_csv(bmmc1000, bmmc1000$seurat_cluster, "BMMC_Test_Label.csv", "BMMC_Test_count.csv")
Seurat_to_csv(bmmc1000, bmmc1000$seurat_clusters, "BMMC_Test_Label.csv", "BMMC_Test_count.csv")
View(Seurat_to_csv)
View(Seurat_to_csv)
library(readr)
BMMC_Test_count <- read_csv("BMMC_small/BMMC_Test_count.csv")
View(BMMC_Test_count)
bmmc1000$
View(Seurat_to_csv)
exit()
+
tes
View(Seurat_to_csv)
View(BMMC_Test_count)
PredLabelsPath<-"BMMC_small/output/scmapcell/scmapcell_pred.csv"
ClusterPath<-"BMMC_small/BMMC_Test_Label.csv"
true_lab <- unlist(read.csv(TrueLabelsPath))
ClusterF <- unlist(read.csv(ClusterPath))
pred_lab <- unlist(read.csv(PredLabelsPath))
install.packages('reshape')
conf <- table(cluster_no,pred_lab)
cluster_no <- unlist(read.csv(ClusterPath))
cluster_no <- cluster_no[columnCluster]
conf <- table(cluster_no,pred_lab)
View(conf)
cast(conf, pred_lab ~ cluster_no)
library(reshape)
cast(conf, pred_lab ~ cluster_no)
cast(conf, cluster_no ~ pred_lab)
data.by.condition <- split(conf, conf$cluster_no)
dim(conf)
View(conf)
conf[1:1]
rownames(conf)
colnames(conf)
prop.table((conf))
prop.table(conf)
prop.table(conf)*100
prop.table(conf, margin = 1)*100
t(prop.table(conf, margin = 1)*100)
rowSums(conf)
conf
?mgsup
?mgsub
gc(9)
gc()
rm(list =ls())
knitr::opts_chunk$set(comment=NA, fig.width=40, fig.height=20, cache=FALSE)
library(dplyr)
library(Seurat)
library(ggplot2)
packageVersion("dplyr")
packageVersion("Seurat")
bmmc_all <- readRDS(file ="./StoredRObj/bmmc_PreProc_Ref2.rds")
DefaultAssay(object = bmmc_all) <- "integrated"
bmmc_all <- FindNeighbors(bmmc_all, reduction = "pca", dims = 1:20)
bmmc_all <- FindClusters(bmmc_all, algorithm = 3, resolution = 0.3, random.seed = 19950927)
DimPlot(bmmc_all, reduction = "umap", label = TRUE, pt.size = 0.2, label.size = 10) + NoLegend()
VlnPlot(bmmc_all, features = c( "AVP","HBA1","CD3D","CD79A", "CD34", "MS4A7", "GNLY", "FCER1A"), assay = "integrated",group.by = "seurat_clusters", ncol = 2, pt.size = 0.1) + NoLegend()
FeaturePlot(bmmc_all, features = c("AVP","HBA1","CD3D","CD79A", "CD34", "MS4A7", "GNLY", "FCER1A", "PPBP"), reduction = "umap", ncol =3)
bmmc_all.markers <- FindAllMarkers(bmmc_all, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
bmmc_all.markers %>% group_by(cluster) %>% top_n(n = 3, wt = avg_logFC)
new.cluster.ids <- c("CD4 Naive and regulatory T-Cells", "CD4 Memory T-Cells ", "CD8 Memory T-Cells", "CD14 Monocytes", "Mature B-Cells",   "CD8 Naive T-cClls", "NK Cells","Late Erythroid Precursors", "Late Erythrocytes", "Early Erythroid Precursors", "Monocyte Progenitor Cells", "CD16 Monocytes","Late Erythrocytes", "B-Cell Progenitors", "Hematopoietic stem and progenitor cells (HSPC)",  "Early Erythrocytes","Conventional Dendritic Cells (cDC)", "B-cells (Plasma cell)", "Plasmacytoid dendritic cells (pDC)", "Undefined (T-Cell progenitors?)", "Megakaryocytes/Platelets",  "Undefined (Duplets?)")
names(new.cluster.ids) <- levels(bmmc_all)
bmmc_all <- RenameIdents(bmmc_all, new.cluster.ids)
bmmc_all@meta.data$celltype <- bmmc_all@active.ident
DimPlot(bmmc_all, reduction = "umap", label = TRUE, pt.size = 0.5, label.size = 10) + NoLegend()
table(bmmc_all$orig.ident, bmmc_all$celltype)
prop.table(table(bmmc_all$orig.ident, bmmc_all$celltype),1)
prop.table(table(bmmc_all$orig.ident, bmmc_all$celltype),1)*100
write_csv(prop.table(table(bmmc_all$orig.ident, bmmc_all$celltype),1)*100, file = "Test.csv")
write_csv(prop.table(table(bmmc_all$orig.ident, bmmc_all$celltype),1)*100,path = "test.csv")
write.csv(prop.table(table(bmmc_all$orig.ident, bmmc_all$celltype),1)*100,path = "test.csv")
write.csv(prop.table(table(bmmc_all$orig.ident, bmmc_all$celltype),1)*100,file = "test.csv")
getwd()
setwd("~/HeterogenetyAML/ProjectData_CITE")
write.csv(prop.table(table(bmmc_all$orig.ident, bmmc_all$celltype),1)*100,file = "test.csv")
write.csv(prop.table(table(bmmc_all$orig.ident, bmmc_all$celltype),1),file = "test.csv")
write.csv(prop.table(table(bmmc_all$celltype),1),file = "test.csv")
write.csv(prop.table(table(bmmc_all$celltype),2),file = "test.csv")
write.csv(prop.table(table(bmmc_all$celltype)),file = "test.csv")
write.csv(table(table(bmmc_all$celltype)),file = "test.csv")
write.csv(table(bmmc_all$celltype),file = "test.csv")
ClusterSummary <- readRDS("~/CAC_01/Snakemake_CAC/BMMC_AML/output/evaluation/ClusterSummary.rds")
View(ClusterSummary)
ClusterSummary["0",,]
prop.table(ClusterSummary["0",,])
prop.table(ClusterSummary["0",,],1)
prop.table(ClusterSummary["0",,],exclude=NULL)
ClusterSummary[is.na(ClusterSummary)] = 0
ClusterSummary["0",,]
prop.table(ClusterSummary["0",,],1)
prop.table(ClusterSummary["0",,],2)
prop.table(ClusterSummary["0",,],2)*100
setwd("~/CAC_01/Snakemake_CAC/BMMC_small/output")
reticulate::repl_python()
